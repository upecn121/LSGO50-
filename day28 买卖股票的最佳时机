/*
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

*/
//1.暴力法执行用时 :868 ms, 在所有 C++ 提交中击败12.80%的用户；内存消耗 :9.5 MB, 在所有 C++ 提交中击败了27.50%的用户
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int i=0;
        int n=prices.size();
        int profit=0;
        for(i=0;i<n-1;i++)
        {
            if(prices[i+1]<prices[i]) continue;
            for(int j=i+1;j<n;j++)
            {
                profit=max(profit,prices[j]-prices[i]);
            }
        }
        return profit;
    }
};

/*2.优化:若当前值大于于波谷（此波谷出现在当前值之前）的时候，就不需要考虑在当前值买进后能赚得的利润了，因为在波谷买入
肯定比在当前买入更优；若当前值小于波谷，则将波谷更新为当前值
执行用时 :
12 ms, 在所有 C++ 提交中击败了60.74%的用户
内存消耗 :
9.6 MB, 在所有 C++ 提交中击败了19.79%的用户
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min=0;
        int profit=0;
        int n=prices.size();
        for(int i=0;i<n;i++)
        {
            if(prices[i]>prices[min])
            profit=max(prices[i]-prices[min],profit);
            else
            {
                min=i;
            }
        }
        return profit;
    }
};
//3.转换为求最大连续和问题.先将数组转换成相邻两数之差的数组（即代表每天的盈亏记录），然后再求该数组的最大连续和（即最大利润）
class Solution {
public:
    int maxProfit(vector<int>& prices) {//主函数
        int n=prices.size();
        if(n==1||n==0) return 0;
        vector<int> diff(n-1);
        for(int i=0;i<n-1;i++)//构造相邻两数之差的数组
        {
            diff[i]=prices[i+1]-prices[i];
        }
        return max(maxSubArray(diff),0);//若最大和为负数则返回0
    }
    int maxSubArray(vector<int>& nums)//求最大连续和的函数；sum存储当前连续和，ans记录最大连续和。当sum为负数时将sum替换为当前元素
    {
        int n=nums.size();
        if(n==0) return NULL;
        int ans=INT_MIN;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            if(sum<0) sum=0; 
            sum+=nums[i];
            ans=max(sum,ans);
        }
        return ans;
    }
};
//针对3的优化
int maxProfit(vector<int>& prices) {
    int last = 0, profit = 0;
    for (int i = 0; i < (int)prices.size() - 1; ++i) 
    {
        last = max(0, last + prices[i+1] - prices[i]);//基于当前值的利润，可以叠加。若小于0则更新为0
        profit = max(profit, last);//保存最大利润
    }
    return profit;
}
