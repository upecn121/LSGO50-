
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head=(ListNode*)malloc(sizeof(ListNode));//也可以写 ListNode* head=new ListNode(-1);
        ListNode* pre=head;
        while(l1!=NULL&&l2!=NULL)
        {
            if(l1->val<=l2->val)
            {
                pre->next=l1;
                l1=l1->next;
            }
            else
            {
                pre->next=l2;
                l2=l2->next;
            }
            pre=pre->next;
        }
        if(l1==NULL)
        pre->next=l2;
        else
        pre->next=l1;
        ListNode *end=head->next;
        free(head);//这是为了防止内存溢出。若使用new来创建头节点，则代码为delete head;
        return end;
    }
};
//评价：因为遍历了所有节点，故时间复杂度为O(m+n).只使用了几个指针，故空间复杂度为O(1)
