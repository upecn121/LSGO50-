给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。
代码如下：
class Solution {
public:
        double findMedianSortedArrays(int nums1[], int nums2[]) {
        int m=nums1.size();
        int n=nums2.size();
        if(m==0)
        {
            if(n&1)
            {
                return(nums2[(n+1)/2];
            }
            return((nums2[n/2]+nums2[n/2+1])/2);
        }
        if(n==0)
        {
            if(m&1)
            {
                return(nums1[(m+1)/2];
            }
            return((nums1[m/2]+nums1[m/2+1])/2);
        }
        int total=m+n;
        //总数为奇数，找第total / 2 + 1个数的平均值       
        if (total & 1) 
        {
            return find_kth(nums1, 0, nums2, 0, total / 2 + 1);
        }
        //总数为偶数，找第 total / 2 个数和第total / 2 + 1个数的平均值
        return (find_kth(nums1, 0, nums2, 0, total / 2) +find_kth(nums1, 0, nums2, 0, total / 2 + 1)) / 2.0;
    }

        //寻找a 和 b 数组中，第k个数字
  double find_kth(int a[], int a_begin, int b[], int b_begin, int k) {
        //当a 或 b 超过数组长度，则第k个数为另外一个数组第k个数
        if (a_begin >= a.length)
            return b[b_begin + k - 1];
        if (b_begin >= b.length)
            return a[a_begin + k - 1];
        //k为1时，两数组最小的那个为第一个数
        if (k == 1)
            return Math.min(a[a_begin], b[b_begin]);

        int mid_a;
        int mid_b;
        //mid_a / mid_b 分别表示 a数组、b数组中第 k / 2 个数
        if (a_begin + k / 2 - 1 < a.length)
            mid_a = a[a_begin + k / 2 - 1];
        if (b_begin + k / 2 - 1 < b.length)
            mid_b = b[b_begin + k / 2 - 1];
        //如果a数组的第 k / 2 个数小于b数组的第 k / 2 个数，表示总的第 k 个数位于 a的第k / 2个数的后半段，或者是b的第 k / 2个数的前半段
        //由于范围缩小了 k / 2 个数，此时总的第 k 个数实际上等于新的范围内的第 k - k / 2个数，依次递归
        if (mid_a < mid_b)
            return find_kth(a,a_begin+k/2,b,b_begin,k-k/2);
        //否则相反
            return find_kth(a,a_begin,b,b_begin+k/2,k-k/2);
    }
};
