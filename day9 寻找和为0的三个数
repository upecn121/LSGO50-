//三指针法，估计复杂度为O(n^2+nlogn)
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());//排序
        if(nums.size()<3||nums.front()>0||nums.back()<0) return {};
        vector<vector<int>> res;//存储结果
        for(int i=0;i<nums.size();i++)
        {
           int fix=nums[i];
           if(fix>0) break;
           if(i>0&&fix=nums[i-1]) continue;
           int l=i+1;
           int r=nums.size()-1;
           while(l<r)
           {
               if(fix+nums[l]+nums[r]==0)
               {
                   if(l==i+1||r==nums.size()-1)  //对应下方的特殊情况
                   {
                       res.push_back(vector<int>{fix,nums[l],nums[r]});
                       l++;
                       r--;
                   }
                   else if(nums[l]==nums[l-1]) l++;
                   else if(nums[r]==nums[r+1]) r--;
                   else
                   {
                      res.push_back(vector<int>{fix,nums[l],nums[r]});
                      l++;
                      r--;
                   }
               }
               else if(fix+nums[l]+nums[r]>0) r--;
               else l++;
           }
        }
        return res;
    }
};
