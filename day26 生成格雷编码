/*
格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。
给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。

示例 1:

输入: 2
输出: [0,1,3,2]
解释:
00 - 0
01 - 1
11 - 3
10 - 2

对于给定的 n，其格雷编码序列并不唯一。
例如，[0,2,3,1] 也是一个有效的格雷编码序列。
00 - 0
10 - 2
11 - 3
01 - 1

示例 2:

输入: 0
输出: [0]
解释: 我们定义格雷编码序列必须以 0 开头。
     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。
     因此，当 n = 0 时，其格雷编码序列为 [0]。

*/
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> res(1);
        res[0]=0;//循环的起点
        for(int i=1;i<=n;i++)
        {
            int e=1<<(i-1);//在已有的各个结果前面加一位“1”即可得到新编码.
            for(int j=res.size()-1;j>=0;j--)
            {
                res.push_back(res[j]+e);//将新编码逆序填入数组。这源于格雷编码的性质。
            }
        }
        return res;
    }
};
//算法特点：每一次循环，或者说每一次增加位数时，都利用了上一次循环生成的结果。算法的时间复杂度为o（2^n）
