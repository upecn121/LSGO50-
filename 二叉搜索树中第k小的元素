//1
int kthSmallest(TreeNode* root, int k) {
    int val = 0;    //k最小值
    int curr = 0;    //当前遍历的序号
    inOrder(root, curr, k, val);    //中序遍历，生成从小到大的顺序
    return val;    
}

void inOrder(TreeNode* root, int& curr, int k, int& val) //curr保持递归内全局变量，val保持最后的数值
{
    if (!root)    //空树
        return;    //返回
    inOrder(root -> left, curr, k, val);    //中序遍历左子树
    curr ++;    //最左元素表示第一个元素,序号加1，每次遍历到root，就是一次最小值。
    if (curr == k)    //序号等于k
    {
        val = root -> val;    //保存当前元素
    }
    inOrder(root -> right, curr, k, val);    //中序遍历右子树
}

//2
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> res;
        stack<TreeNode*> sta;
        TreeNode *p=root;
        while(p || !sta.empty()){
            while(p) {
                sta.push(p);
                p=p->left;
            }
            if(!sta.empty()){
                p=sta.top();
                sta.pop();
                res.push_back(p->val);
                p=p->right;
            }
        }
        return res[k-1];
    }
};
