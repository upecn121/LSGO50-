/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKlists(vector<ListNode*>& lists, int begin, int end) //用于归并k个链表
    {
        if(begin>end) return NULL;
        if(begin==end) return lists[begin];//递归基之一
        int mid=(begin+end)/2;
        ListNode* p1=mergeKlists(lists,begin,mid);//开始分治 k 个链表。基本思路是将链表的规模不停的减半
        ListNode* p2=mergeKlists(lists,mid+1,end);
        ListNode head(0);
        ListNode* pre=&head;
         while(p1&&p2)
        {
            if(p1->val<=p2->val)
            {
                pre->next=p1;
                p1=p1->next;
            }
            else
            {
                pre->next=p2;
                p2=p2->next;
            }
            pre=pre->next;
        }
        if(p1==NULL)
        pre->next=p2;
        else
        pre->next=p1;
        return head.next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists)
    {
        return mergeKlists(lists, 0,lists.size()-1);
    }    
};
